/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Gestores.GestorAula;
import Gestores.GestorPeriodo;
import Gestores.GestorReserva;
import Gestores.GestorValidacion;
import Modelo.Aula;
import Modelo.FechasPeriodo;
import Modelo.PeriodoEnum;
import Modelo.TipoAula;
import Modelo.TipoReserva;
import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.net.URL;
import java.text.Format;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Temp
 */
public class RegistrarReserva extends javax.swing.JPanel {

    /**
     * Creates new form RegistrarReserva
     */
    public RegistrarReserva() {
        initComponents();
        
        /*String path = "/Imagenes/iconoaula1.png";  
        URL url = this.getClass().getResource(path);  
        ImageIcon icon = new ImageIcon(url);
        jLabel2.setIcon(icon); */ 
            
            listaPeriodo.setVisible(false);
            listaCuatrimestre.setVisible(false);
            jLabelDiaSemana.setVisible(false);
            jCheckBoxLunes.setVisible(false);
            jCheckBoxMartes.setVisible(false);
            jCheckBoxMiercoles.setVisible(false);
            jCheckBoxJueves.setVisible(false);
            jCheckBoxViernes.setVisible(false);
            jCheckBoxSabado.setVisible(false);
            jLabelDuracion1.setVisible(false);
            duracionLunes.setVisible(false);
            duracionMartes.setVisible(false);
            duracionMiercoles.setVisible(false);
            duracionJueves.setVisible(false);
            duracionViernes.setVisible(false);
            duracionSabado.setVisible(false);
            jLabelHoraInicio1.setVisible(false);
            horaInicioLunes.setVisible(false);
            horaInicioMartes.setVisible(false);
            horaInicioMiercoles.setVisible(false);
            horaInicioJueves.setVisible(false);
            horaInicioViernes.setVisible(false);
            horaInicioSabado.setVisible(false);
            
            jLabelFecha.setVisible(true);
            fecha.setVisible(true);
            jLabelHoraInicio2.setVisible(true);
            horaInicio.setVisible(true);
            jLabelDuracion2.setVisible(true);
            duracion.setVisible(true);
            tabla.setVisible(true);
            panelTabla.setVisible(true);
            jButtonEliminar.setVisible(true);
            jButtonAnadir.setVisible(true);
            
            //Bloqueo la hora inicio y la duracion para reserva periodica hasta que hagan click en el checkbox correspondiente
            horaInicioLunes.setEnabled(false);
            horaInicioMartes.setEnabled(false);
            horaInicioMiercoles.setEnabled(false);
            horaInicioJueves.setEnabled(false);
            horaInicioViernes.setEnabled(false);
            horaInicioSabado.setEnabled(false);
            
            duracionLunes.setEnabled(false);
            duracionMartes.setEnabled(false);
            duracionMiercoles.setEnabled(false);
            duracionJueves.setEnabled(false);
            duracionViernes.setEnabled(false);
            duracionSabado.setEnabled(false);
            
            
            
            /*JTableHeader header= tabla.getTableHeader();
            TableColumnModel colMod = header.getColumnModel();
            colMod.getColumn(0).setHeaderValue("Fecha");
            colMod.getColumn(1).setHeaderValue("Hora inicio");
            colMod.getColumn(2).setHeaderValue("Duracion");
            header.repaint();*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tipoAula = new javax.swing.JComboBox<>();
        cantidadAlumnos = new javax.swing.JTextField();
        listaModalidad = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jLabelFecha = new javax.swing.JLabel();
        jLabelHoraInicio2 = new javax.swing.JLabel();
        jLabelDuracion2 = new javax.swing.JLabel();
        fecha = new javax.swing.JTextField();
        horaInicio = new javax.swing.JTextField();
        jButtonEliminar = new javax.swing.JButton();
        jButtonAnadir = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        nombre = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        catedra = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        apellido = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        atras = new javax.swing.JButton();
        aceptar = new javax.swing.JButton();
        jLabelDiaSemana = new javax.swing.JLabel();
        jCheckBoxLunes = new javax.swing.JCheckBox();
        jCheckBoxMartes = new javax.swing.JCheckBox();
        jCheckBoxMiercoles = new javax.swing.JCheckBox();
        jCheckBoxJueves = new javax.swing.JCheckBox();
        jCheckBoxViernes = new javax.swing.JCheckBox();
        jCheckBoxSabado = new javax.swing.JCheckBox();
        jLabelHoraInicio1 = new javax.swing.JLabel();
        horaInicioLunes = new javax.swing.JTextField();
        horaInicioMartes = new javax.swing.JTextField();
        horaInicioMiercoles = new javax.swing.JTextField();
        horaInicioJueves = new javax.swing.JTextField();
        horaInicioViernes = new javax.swing.JTextField();
        horaInicioSabado = new javax.swing.JTextField();
        jLabelDuracion1 = new javax.swing.JLabel();
        duracionLunes = new javax.swing.JComboBox<>();
        duracionMartes = new javax.swing.JComboBox<>();
        duracionMiercoles = new javax.swing.JComboBox<>();
        duracionJueves = new javax.swing.JComboBox<>();
        duracionViernes = new javax.swing.JComboBox<>();
        duracionSabado = new javax.swing.JComboBox<>();
        listaPeriodo = new javax.swing.JComboBox<>();
        listaCuatrimestre = new javax.swing.JComboBox<>();
        panelTabla = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        duracion = new javax.swing.JComboBox<>();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Registrar reserva");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Tipo de aula:");
        jLabel3.setToolTipText("Elija una modalidad de la lista.");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Cantidad de alumnos:");
        jLabel4.setToolTipText("Cantidad mínima: 1 - Cantidad máxima: 250");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Modalidad:");
        jLabel5.setToolTipText("Elija una modalidad de la lista.");

        tipoAula.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aula sin recursos adicionales", "Aula multimedio", "Aula informatica", " " }));
        tipoAula.setToolTipText("Elija una modalidad de la lista.");
        tipoAula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoAulaActionPerformed(evt);
            }
        });

        cantidadAlumnos.setToolTipText("Cantidad mínima: 1 - Cantidad máxima: 250");

        listaModalidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Esporadica", "Periodica" }));
        listaModalidad.setToolTipText("Elija una modalidad de la lista.");
        listaModalidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaModalidadActionPerformed(evt);
            }
        });

        jLabelFecha.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelFecha.setForeground(new java.awt.Color(255, 255, 255));
        jLabelFecha.setText("Fecha:");

        jLabelHoraInicio2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelHoraInicio2.setForeground(new java.awt.Color(255, 255, 255));
        jLabelHoraInicio2.setText("Hora de inicio:");

        jLabelDuracion2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelDuracion2.setForeground(new java.awt.Color(255, 255, 255));
        jLabelDuracion2.setText("Duración (minutos):");

        fecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fechaActionPerformed(evt);
            }
        });

        jButtonEliminar.setText("Eliminar de la lista");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jButtonAnadir.setText("Añadir a la lista");
        jButtonAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnadirActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Nombre:");

        nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Actividad:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Apellido:");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("E-mail:");

        atras.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        atras.setText("Cancelar");
        atras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atrasActionPerformed(evt);
            }
        });

        aceptar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        aceptar.setText("Obtener aulas disponibles");
        aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarActionPerformed(evt);
            }
        });

        jLabelDiaSemana.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelDiaSemana.setForeground(new java.awt.Color(255, 255, 255));
        jLabelDiaSemana.setText("Día de la semana:");

        jCheckBoxLunes.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxLunes.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxLunes.setText("Lunes");
        jCheckBoxLunes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxLunesActionPerformed(evt);
            }
        });

        jCheckBoxMartes.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxMartes.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxMartes.setText("Martes");
        jCheckBoxMartes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMartesActionPerformed(evt);
            }
        });

        jCheckBoxMiercoles.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxMiercoles.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxMiercoles.setText("Miércoles");
        jCheckBoxMiercoles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMiercolesActionPerformed(evt);
            }
        });

        jCheckBoxJueves.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxJueves.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxJueves.setText("Jueves");
        jCheckBoxJueves.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxJuevesActionPerformed(evt);
            }
        });

        jCheckBoxViernes.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxViernes.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxViernes.setText("Viernes");
        jCheckBoxViernes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxViernesActionPerformed(evt);
            }
        });

        jCheckBoxSabado.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxSabado.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBoxSabado.setText("Sábado");
        jCheckBoxSabado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSabadoActionPerformed(evt);
            }
        });

        jLabelHoraInicio1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelHoraInicio1.setForeground(new java.awt.Color(255, 255, 255));
        jLabelHoraInicio1.setText("Hora de inicio:");

        horaInicioLunes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horaInicioLunesActionPerformed(evt);
            }
        });

        horaInicioMartes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horaInicioMartesActionPerformed(evt);
            }
        });

        horaInicioSabado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horaInicioSabadoActionPerformed(evt);
            }
        });

        jLabelDuracion1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelDuracion1.setForeground(new java.awt.Color(255, 255, 255));
        jLabelDuracion1.setText("Duración (minutos):");

        duracionLunes.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        duracionLunes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "30", "60", "90", "120", "150", "180", "210", "240", "270", "300", "330", "360" }));
        duracionLunes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duracionLunesActionPerformed(evt);
            }
        });

        duracionMartes.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        duracionMartes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "30", "60", "90", "120", "150", "180", "210", "240", "270", "300", "330", "360" }));
        duracionMartes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duracionMartesActionPerformed(evt);
            }
        });

        duracionMiercoles.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        duracionMiercoles.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "30", "60", "90", "120", "150", "180", "210", "240", "270", "300", "330", "360" }));
        duracionMiercoles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duracionMiercolesActionPerformed(evt);
            }
        });

        duracionJueves.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        duracionJueves.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "30", "60", "90", "120", "150", "180", "210", "240", "270", "300", "330", "360" }));
        duracionJueves.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duracionJuevesActionPerformed(evt);
            }
        });

        duracionViernes.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        duracionViernes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "30", "60", "90", "120", "150", "180", "210", "240", "270", "300", "330", "360" }));
        duracionViernes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duracionViernesActionPerformed(evt);
            }
        });

        duracionSabado.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        duracionSabado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "30", "60", "90", "120", "150", "180", "210", "240", "270", "300", "330", "360" }));
        duracionSabado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duracionSabadoActionPerformed(evt);
            }
        });

        listaPeriodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cuatrimestral", "Anual" }));
        listaPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaPeriodoActionPerformed(evt);
            }
        });

        listaCuatrimestre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1º", "2º" }));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Hora inicio", "Duración", "Tipo de Aula", "Cantidad de Alumnos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        javax.swing.GroupLayout panelTablaLayout = new javax.swing.GroupLayout(panelTabla);
        panelTabla.setLayout(panelTablaLayout);
        panelTablaLayout.setHorizontalGroup(
            panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTablaLayout.setVerticalGroup(
            panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                .addContainerGap())
        );

        duracion.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        duracion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "30", "60", "90", "120", "150", "180", "210", "240", "270", "300", "330", "360" }));
        duracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duracionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(listaModalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(listaPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(listaCuatrimestre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(tipoAula, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addGap(12, 12, 12)
                                .addComponent(cantidadAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelDiaSemana)
                            .addComponent(jLabelHoraInicio1)
                            .addComponent(jLabelDuracion1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCheckBoxLunes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(horaInicioLunes)
                            .addComponent(duracionLunes, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jCheckBoxMartes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(horaInicioMartes, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(duracionMartes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jCheckBoxMiercoles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(horaInicioMiercoles, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jCheckBoxJueves, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(horaInicioJueves, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jCheckBoxViernes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(horaInicioViernes, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jCheckBoxSabado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(horaInicioSabado, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(duracionMiercoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(duracionJueves, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addComponent(duracionViernes, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(duracionSabado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelFecha)
                        .addGap(18, 18, 18)
                        .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelHoraInicio2)
                        .addGap(18, 18, 18)
                        .addComponent(horaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jLabelDuracion2)
                        .addGap(18, 18, 18)
                        .addComponent(duracion, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelTabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(18, 18, 18))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(16, 16, 16)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(catedra, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jButtonAnadir, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(atras))
                        .addGap(134, 134, 134)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonEliminar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(apellido, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(aceptar, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipoAula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cantidadAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaModalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(listaPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listaCuatrimestre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDiaSemana)
                    .addComponent(jCheckBoxLunes)
                    .addComponent(jCheckBoxMartes)
                    .addComponent(jCheckBoxMiercoles)
                    .addComponent(jCheckBoxJueves)
                    .addComponent(jCheckBoxViernes)
                    .addComponent(jCheckBoxSabado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelHoraInicio1)
                    .addComponent(horaInicioLunes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(horaInicioMartes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(horaInicioMiercoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(horaInicioJueves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(horaInicioViernes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(horaInicioSabado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDuracion1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(duracionLunes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(duracionMartes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(duracionMiercoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(duracionJueves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(duracionViernes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(duracionSabado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFecha)
                    .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelHoraInicio2)
                    .addComponent(horaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDuracion2)
                    .addComponent(duracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(panelTabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAnadir)
                    .addComponent(jButtonEliminar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11)
                    .addComponent(apellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(catedra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aceptar)
                    .addComponent(atras))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fechaActionPerformed

    private void nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreActionPerformed

    private void jCheckBoxSabadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSabadoActionPerformed
        if(this.jCheckBoxSabado.isSelected()){
            this.horaInicioSabado.setEnabled(true);
            this.duracionSabado.setEnabled(true);
        }else{
            this.horaInicioSabado.setText("");
            this.horaInicioSabado.setEnabled(false);
            this.duracionSabado.setSelectedItem("Seleccione");
            this.duracionSabado.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBoxSabadoActionPerformed

    private void duracionLunesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duracionLunesActionPerformed
        
    }//GEN-LAST:event_duracionLunesActionPerformed

    private void horaInicioSabadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horaInicioSabadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_horaInicioSabadoActionPerformed

    private void horaInicioMartesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horaInicioMartesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_horaInicioMartesActionPerformed

    private void listaModalidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaModalidadActionPerformed
        // TODO add your handling code here:
        String modalidad = listaModalidad.getSelectedItem().toString();
        if (modalidad.equals("Esporadica")){
            listaPeriodo.setVisible(false);
            listaCuatrimestre.setVisible(false);
            jLabelDiaSemana.setVisible(false);
            jCheckBoxLunes.setVisible(false);
            jCheckBoxMartes.setVisible(false);
            jCheckBoxMiercoles.setVisible(false);
            jCheckBoxJueves.setVisible(false);
            jCheckBoxViernes.setVisible(false);
            jCheckBoxSabado.setVisible(false);
            jLabelDuracion1.setVisible(false);
            duracionLunes.setVisible(false);
            duracionMartes.setVisible(false);
            duracionMiercoles.setVisible(false);
            duracionJueves.setVisible(false);
            duracionViernes.setVisible(false);
            duracionSabado.setVisible(false);
            jLabelHoraInicio1.setVisible(false);
            horaInicioLunes.setVisible(false);
            horaInicioMartes.setVisible(false);
            horaInicioMiercoles.setVisible(false);
            horaInicioJueves.setVisible(false);
            horaInicioViernes.setVisible(false);
            horaInicioSabado.setVisible(false);
            
            jLabelFecha.setVisible(true);
            fecha.setVisible(true);
            jLabelHoraInicio2.setVisible(true);
            horaInicio.setVisible(true);
            jLabelDuracion2.setVisible(true);
            duracion.setVisible(true);
            tabla.setVisible(true);
            panelTabla.setVisible(true);
            jButtonEliminar.setVisible(true);
            jButtonAnadir.setVisible(true);
            
            /*JTableHeader header= tabla.getTableHeader();
            TableColumnModel colMod = header.getColumnModel();
            colMod.getColumn(0).setHeaderValue("Fecha");
            colMod.getColumn(1).setHeaderValue("Hora inicio");
            colMod.getColumn(2).setHeaderValue("Duracion");
            header.repaint();*/
        }else{
            jLabelFecha.setVisible(false);
            fecha.setVisible(false);
            jLabelHoraInicio2.setVisible(false);
            horaInicio.setVisible(false);
            jLabelDuracion2.setVisible(false);
            duracion.setVisible(false);
            tabla.setVisible(false);
            panelTabla.setVisible(false);
            jButtonEliminar.setVisible(false);
            jButtonAnadir.setVisible(false);
            
            /*JTableHeader header= tabla.getTableHeader();
            TableColumnModel colMod = header.getColumnModel();
            colMod.getColumn(0).setHeaderValue("");
            colMod.getColumn(1).setHeaderValue("");
            colMod.getColumn(2).setHeaderValue("");
            header.repaint();*/
            
            listaPeriodo.setVisible(true);
            listaCuatrimestre.setVisible(true);
            jLabelDiaSemana.setVisible(true);
            jCheckBoxLunes.setVisible(true);
            jCheckBoxMartes.setVisible(true);
            jCheckBoxMiercoles.setVisible(true);
            jCheckBoxJueves.setVisible(true);
            jCheckBoxViernes.setVisible(true);
            jCheckBoxSabado.setVisible(true);
            jLabelDuracion1.setVisible(true);
            duracionLunes.setVisible(true);
            duracionMartes.setVisible(true);
            duracionMiercoles.setVisible(true);
            duracionJueves.setVisible(true);
            duracionViernes.setVisible(true);
            duracionSabado.setVisible(true);
            jLabelHoraInicio1.setVisible(true);
            horaInicioLunes.setVisible(true);
            horaInicioMartes.setVisible(true);
            horaInicioMiercoles.setVisible(true);
            horaInicioJueves.setVisible(true);
            horaInicioViernes.setVisible(true);
            horaInicioSabado.setVisible(true);
        }
    }//GEN-LAST:event_listaModalidadActionPerformed

    private void listaPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaPeriodoActionPerformed
        // TODO add your handling code here:
        String periodo = listaPeriodo.getSelectedItem().toString();
        if(periodo.equals("Cuatrimestral")){
           listaCuatrimestre.setVisible(true);
        }else{
           listaCuatrimestre.setVisible(false);
        }
    }//GEN-LAST:event_listaPeriodoActionPerformed

    private void aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarActionPerformed
        
        JFramePrincipal topFrame = (JFramePrincipal) SwingUtilities.getWindowAncestor(this);
        
        ArrayList<Date> dias = new ArrayList();
        ArrayList<Date> horaInicio = new ArrayList();
        ArrayList<Date> horaFin = new ArrayList();
        ArrayList<PeriodoEnum> periodos = new ArrayList();
        ArrayList<TipoAula> tipoAulas = new ArrayList();
        
        GestorAula gestorAula = new GestorAula(); 
        GestorReserva gestorReserva = new GestorReserva();
        int cantAlumnos = 0;
        PeriodoEnum periodo = PeriodoEnum.Ninguno;
        FechasPeriodo fechasPeriodo = new FechasPeriodo();
        TipoReserva tipoReserva = null;

        //Recupero...
        //Apellido
        String docenteApellido = this.apellido.getText();
        //Nombre
        String docenteNombre = this.nombre.getText();
        //Email
        String emailDato = this.email.getText();
        //Catedra
        String catedraDato = this.catedra.getText();
        //Tipo Aula (es una lista desplegable por lo que siempre va a tener algún valor)
        TipoAula tipoAulaDato = TipoAula.SinRecursos;
        switch (this.tipoAula.getSelectedItem().toString()){
           case "Aula informatica": tipoAulaDato = TipoAula.Informatica;break;
           case "Aula multimedio": tipoAulaDato = TipoAula.Multimedios;break;
           case "Aula sin recursos adicionales": tipoAulaDato = TipoAula.SinRecursos;break;
        }
        
        //Modalidad
        String modalidad = this.listaModalidad.getSelectedItem().toString();
        if(modalidad.equals("Periodica")){
            //Cantidad de alumnos
            //Obtengo un String del jTextField, el replaceAll elimina los espacios (si los tuviera) y parseInt lo convierte en int
            if(!this.cantidadAlumnos.getText().isEmpty()){
                if(gestorReserva.validarStringSoloConNumeros(this.cantidadAlumnos.getText())){
                    //Obtengo un String del jTextField y parseInt lo convierte en int
                    cantAlumnos = Integer.parseInt((this.cantidadAlumnos.getText()));
                }else{
                    topFrame.mensajeEmergente("Datos Incorrectos", "Debe ingresar solo números en la cantidad de alumnos");
                }
            }else{
                topFrame.mensajeEmergente("Falta datos", "Debe ingresar la cantidad de alumnos");
            }
            tipoReserva = TipoReserva.Periodica;
            //Periodo
            //Cuatrimestre (si no esta vacio)
            if (this.listaPeriodo.getSelectedItem().toString().equals("Cuatrimestral")){
                switch (this.listaCuatrimestre.getSelectedItem().toString()){
                    case "1º": periodo = PeriodoEnum.PrimerCuatrimestre;break;
                    case "2º": periodo = PeriodoEnum.SegundoCuatrimestre;break;
                }
            }else{
                periodo = PeriodoEnum.Anual;
            }
            //Dias
            if (this.jCheckBoxLunes.isSelected()){
                try {
                    dias.add(convertirStringADateFormatoFechaDia("lunes"));
                } catch (ParseException ex) {
                    Logger.getLogger(RegistrarReserva.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (this.jCheckBoxMartes.isSelected()){
                try {
                    dias.add(convertirStringADateFormatoFechaDia("martes"));
                } catch (ParseException ex) {
                    Logger.getLogger(RegistrarReserva.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (this.jCheckBoxMiercoles.isSelected()){
                try {
                    dias.add(convertirStringADateFormatoFechaDia("miércoles"));
                } catch (ParseException ex) {
                    Logger.getLogger(RegistrarReserva.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (this.jCheckBoxJueves.isSelected()){
                try {
                    dias.add(convertirStringADateFormatoFechaDia("jueves"));
                } catch (ParseException ex) {
                    Logger.getLogger(RegistrarReserva.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (this.jCheckBoxViernes.isSelected()){
                try {
                    dias.add(convertirStringADateFormatoFechaDia("viernes"));
                } catch (ParseException ex) {
                    Logger.getLogger(RegistrarReserva.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (this.jCheckBoxSabado.isSelected()){
                try {
                    dias.add(convertirStringADateFormatoFechaDia("sábado"));
                } catch (ParseException ex) {
                    Logger.getLogger(RegistrarReserva.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            //HoraInicio
            //Si ingresaron algún horario y el checkbox del dia está activado...
            if (!this.horaInicioLunes.getText().isEmpty() && this.jCheckBoxLunes.isSelected()){
                horaInicio.add(convertirStringADateFormatoHora(this.horaInicioLunes.getText()));
            }else{
                if(this.jCheckBoxLunes.isSelected()){
                    //Mostrar mensaje de que falta la hora inicio
                topFrame.mensajeEmergente("Falta datos", "Debe ingresar una hora inicio para el día Lunes.");
                }                
            }
            if (!this.horaInicioMartes.getText().isEmpty() && this.jCheckBoxMartes.isSelected()){
                horaInicio.add(convertirStringADateFormatoHora(this.horaInicioMartes.getText()));
            }else{
                if(this.jCheckBoxMartes.isSelected()){
                    //Mostrar mensaje de que falta la hora inicio
                topFrame.mensajeEmergente("Falta datos", "Debe ingresar una hora inicio para el día Martes.");
                } 
            }
            if (!this.horaInicioMiercoles.getText().isEmpty() && this.jCheckBoxMiercoles.isSelected()){
                horaInicio.add(convertirStringADateFormatoHora(this.horaInicioMiercoles.getText()));
            }else{
                if(this.jCheckBoxMiercoles.isSelected()){
                    //Mostrar mensaje de que falta la hora inicio
                topFrame.mensajeEmergente("Falta datos", "Debe ingresar una hora inicio para el día Miércoles.");
                } 
            }
            if (!this.horaInicioJueves.getText().isEmpty() && this.jCheckBoxJueves.isSelected()){
                horaInicio.add(convertirStringADateFormatoHora(this.horaInicioJueves.getText()));
            }else{
                if(this.jCheckBoxJueves.isSelected()){
                    //Mostrar mensaje de que falta la hora inicio
                topFrame.mensajeEmergente("Falta datos", "Debe ingresar una hora inicio para el día Jueves.");
                } 
            }
            if (!this.horaInicioViernes.getText().isEmpty() && this.jCheckBoxViernes.isSelected()){
                horaInicio.add(convertirStringADateFormatoHora(this.horaInicioViernes.getText()));
            }else{
                if(this.jCheckBoxViernes.isSelected()){
                    //Mostrar mensaje de que falta la hora inicio
                topFrame.mensajeEmergente("Falta datos", "Debe ingresar una hora inicio para el día Viernes.");
                } 
            }
            if (!this.horaInicioSabado.getText().isEmpty() && this.jCheckBoxSabado.isSelected()){
                horaInicio.add(convertirStringADateFormatoHora(this.horaInicioSabado.getText()));
            }else{
                if(this.jCheckBoxSabado.isSelected()){
                    //Mostrar mensaje de que falta la hora inicio
                topFrame.mensajeEmergente("Falta datos", "Debe ingresar una hora inicio para el día Sábado.");
                } 
            }
            //HoraFin
           
            if (!this.duracionLunes.getSelectedItem().toString().equalsIgnoreCase("Seleccione") && this.jCheckBoxLunes.isSelected()){
                horaFin.add(sumarMinutosAHoraInicio(this.horaInicioLunes.getText(),this.duracionLunes.getSelectedItem().toString()));
            }else{
                if(this.jCheckBoxLunes.isSelected()){
                    //Mostrar mensaje de que falta la duracion
                    topFrame.mensajeEmergente("Falta datos", "Debe ingresar una duración para el día Lunes.");
                }
            }
            if (!this.duracionMartes.getSelectedItem().toString().equalsIgnoreCase("Seleccione") && this.jCheckBoxMartes.isSelected()){
                horaFin.add(sumarMinutosAHoraInicio(this.horaInicioMartes.getText(),this.duracionMartes.getSelectedItem().toString()));
            }else{
                if(this.jCheckBoxMartes.isSelected()){
                    //Mostrar mensaje de que falta la duracion
                    topFrame.mensajeEmergente("Falta datos", "Debe ingresar una duración para el día Martes.");
                }
            }
            if (!this.duracionMiercoles.getSelectedItem().toString().equalsIgnoreCase("Seleccione") && this.jCheckBoxMiercoles.isSelected()){
                horaFin.add(sumarMinutosAHoraInicio(this.horaInicioMiercoles.getText(),this.duracionMiercoles.getSelectedItem().toString()));
            }else{
                if(this.jCheckBoxMiercoles.isSelected()){
                    //Mostrar mensaje de que falta la duracion
                    topFrame.mensajeEmergente("Falta datos", "Debe ingresar una duración para el día Miércoles.");
                }
            }
            if (!this.duracionJueves.getSelectedItem().toString().equalsIgnoreCase("Seleccione") && this.jCheckBoxJueves.isSelected()){
                horaFin.add(sumarMinutosAHoraInicio(this.horaInicioJueves.getText(),this.duracionJueves.getSelectedItem().toString()));
            }else{
                if(this.jCheckBoxJueves.isSelected()){
                    //Mostrar mensaje de que falta la duracion
                    topFrame.mensajeEmergente("Falta datos", "Debe ingresar una duración para el día Jueves.");
                }
            }
            if (!this.duracionViernes.getSelectedItem().toString().equalsIgnoreCase("Seleccione") && this.jCheckBoxViernes.isSelected()){
                horaFin.add(sumarMinutosAHoraInicio(this.horaInicioViernes.getText(),this.duracionViernes.getSelectedItem().toString()));
            }else{
                if(this.jCheckBoxViernes.isSelected()){
                    //Mostrar mensaje de que falta la duracion
                    topFrame.mensajeEmergente("Falta datos", "Debe ingresar una duración para el día Viernes.");
                }
            }
            if (!this.duracionSabado.getSelectedItem().toString().equalsIgnoreCase("Seleccione") && this.jCheckBoxSabado.isSelected()){
                horaFin.add(sumarMinutosAHoraInicio(this.horaInicioSabado.getText(),this.duracionSabado.getSelectedItem().toString()));
            }else{
                if(this.jCheckBoxSabado.isSelected()){
                    //Mostrar mensaje de que falta la duracion
                    topFrame.mensajeEmergente("Falta datos", "Debe ingresar una duración para el día Sábado.");
                }
            }
            for (int i=0; i< dias.size(); i++){
                periodos.add(periodo);
            }
        }else{  //Si no es periodica es esporádica (no hay otra alternativa) y si tiene al menos una fila
            if(tabla.getRowCount()>0){
                tipoReserva = TipoReserva.Esporadica;
                GestorPeriodo gestorPeriodo = new GestorPeriodo();
                fechasPeriodo = gestorPeriodo.getPeriodo();
                
                Date inicioPrimerCuatrimestre = fechasPeriodo.getInicioPrimerCuatrimestre();
                Date finPrimerCuatrimestre = fechasPeriodo.getFinPrimerCuatrimestre();
                Date inicioSegundoCuatrimestre = fechasPeriodo.getInicioSegundoCuatrimestre();
                Date finSegundoCuatrimestre = fechasPeriodo.getFinSegundoCuatrimestre();
                
                                
                //Si la reserva es Esporadica la tabla ya está validada por lo que solo leo la tabla
                for(int i=0; i<this.tabla.getRowCount();i++){
                    dias.add(convertirStringADateFormatoFecha(this.tabla.getModel().getValueAt(i, 0).toString()));
                    horaInicio.add(convertirStringADateFormatoHora(this.tabla.getModel().getValueAt(i, 1).toString()));
                    horaFin.add(sumarMinutosAHoraInicio(this.tabla.getModel().getValueAt(i, 1).toString(),this.tabla.getModel().getValueAt(i, 2).toString()));
                    tipoAulas.add(convertirATipoAula(this.tabla.getModel().getValueAt(i, 3).toString()));
                    if(dias.get(i).compareTo(inicioPrimerCuatrimestre)>=0 && dias.get(i).compareTo(finPrimerCuatrimestre)<=0){
                        periodos.add(PeriodoEnum.PrimerCuatrimestre);
                    }else{
                        if(dias.get(i).compareTo(inicioSegundoCuatrimestre)>=0 && dias.get(i).compareTo(finSegundoCuatrimestre)<=0){
                            periodos.add(PeriodoEnum.SegundoCuatrimestre);
                        }else{
                            periodos.add(PeriodoEnum.Ninguno);
                        }
                    }
                }
            }
        }
        //System.out.println("Llego");
        //Valido el nombre, apellido, catedra, email, existencia de docente y de catedra y relacion entre actividad y docente.
        int retorno = gestorReserva.validarTipoDeDatos(docenteApellido,docenteNombre,catedraDato, emailDato);
            
        switch(retorno){
            case 0: 
                    //Si la reserva es periodica
                    if( tipoReserva == TipoReserva.Periodica){  //FALTA VALIDAR QUE EL DOCENTE DE LA ACT UNIVERSITARIA
                        //Busco disponibilidad de aulas      
                        //System.out.println("Llego");
                        ArrayList<ArrayList<Aula>> aulasDisponibles = gestorAula.obtenerDisponibilidadDeAula(dias, horaInicio, horaFin, periodos, cantAlumnos, tipoAulaDato);
                        ArrayList<String> diasTexto = convertirArrayDeDateAArrayStringFormatoDia(dias);
                        ArrayList<String> horaInicioTexto = convertirArrayDeDateAArrayStringFormatoHora(horaInicio);
                        System.out.println(aulasDisponibles.size());
                        ReservaAulasDisponibles panelAulas = new ReservaAulasDisponibles(diasTexto,horaInicioTexto, aulasDisponibles);
                        panelAulas.setImage("/Imagenes/fondoabs.jpg");
                        topFrame.add(panelAulas, BorderLayout.CENTER);
                        this.setVisible(false);
                        topFrame.remove(this);
                        topFrame.setSize(1100,500);
                    }else{
                        //Si no hay dias solapados (lo de los horarios está demás) y la reserva es esporadica
                        
                            ArrayList<ArrayList<Aula>> aulasDisponibles = new ArrayList (new ArrayList());
                            ArrayList<ArrayList<Aula>> aulas = new ArrayList (new ArrayList());
                            ArrayList<Date> diaFila = new ArrayList();
                            ArrayList<Date> horaInicioFila = new ArrayList();
                            ArrayList<Date> horaFinFila = new ArrayList();
                            ArrayList<PeriodoEnum> periodoFila = new ArrayList();
                            TipoAula tipoAulaFila;
                            int cantAlumnosFila;
                            
                            ArrayList<String> diasTexto = convertirArrayDeDateAArrayStringFormatoDia(dias);
                            ArrayList<String> horaInicioTexto = convertirArrayDeDateAArrayStringFormatoHora(horaInicio);
                                                        
                            for(int i=0;i<dias.size();i++){
                                diaFila.add(dias.get(i));
                                horaInicioFila.add(horaInicio.get(i));
                                horaFinFila.add(horaFin.get(i));
                                periodoFila.add(periodos.get(i));
                                cantAlumnosFila = (int) this.tabla.getModel().getValueAt(i, 4);
                                tipoAulaFila = tipoAulas.get(i);
                                //En cada indice voy a tener el dia y todas las reservas disponibles
                                aulasDisponibles = gestorAula.obtenerDisponibilidadDeAula(diaFila, horaInicioFila, horaFinFila, periodoFila, cantAlumnosFila, tipoAulaFila);
                                aulas.add(aulasDisponibles.get(i));
                                aulasDisponibles.clear();
                                diaFila.clear();
                                horaInicioFila.clear();
                                horaFinFila.clear();
                                periodoFila.clear();
                                
                            }
                            
                            ReservaAulasDisponibles panelAulas = new ReservaAulasDisponibles(diasTexto,horaInicioTexto, aulas);
                            panelAulas.setImage("/Imagenes/fondoabs.jpg");
                            topFrame.add(panelAulas, BorderLayout.CENTER);
                            this.setVisible(false);
                            topFrame.remove(this);
                            topFrame.setSize(1100,500);
                            }
                            //Sino Imprimo todos los dias y horarios solapados
                            //Trasnformo el Array de dias en un string
                            String mensaje = "Se ha detectado que ya existe reserva para: \n";
                            topFrame.mensajeEmergente("Dias con problemas", mensaje.concat(obtenerStringDeUnArrayDeDate(dias,horaInicio)));
                        
                        break;
            case 1: topFrame.mensajeEmergente("Datos Incorrectos", "El nombre y el apellido debe contener solo letras.");break;
            case 2: topFrame.mensajeEmergente("Docente no registrado", "El docente ingresado no se encuentra registrado. Por favor verifique que se halla ingresado correctamente los datos.");break;
            case 3: topFrame.mensajeEmergente("Actividad Incorrecta", "No se encuentra la actividad universitaria ingresada.");break;
        }
           
    }//GEN-LAST:event_aceptarActionPerformed
    
    private TipoAula convertirATipoAula(String tipo){
        TipoAula tipoAulaConvertido = TipoAula.SinRecursos;
        switch (tipo){
           case "Aula informatica": tipoAulaConvertido = TipoAula.Informatica;break;
           case "Aula multimedio": tipoAulaConvertido = TipoAula.Multimedios;break;
           case "Aula sin recursos adicionales": tipoAulaConvertido = TipoAula.SinRecursos;break;
        }
        return tipoAulaConvertido;
    }
    
    private ArrayList<String> convertirArrayDeDateAArrayStringFormatoDia(ArrayList<Date> dias){
        ArrayList<String> retorno = new ArrayList<String>();
        Format formatter = new SimpleDateFormat("yyyy-MM-dd");
        String diaString;
        for(int i=0;i<dias.size();i++){
           //De Date a String para FECHA:
            diaString = formatter.format(dias.get(i));
            retorno.add(diaString);
        }
        return retorno;
    }
    


    
    private ArrayList<String> convertirArrayDeDateAArrayStringFormatoHora(ArrayList<Date> horaInicio){
        ArrayList<String> retorno = new ArrayList<String>();
        Format formatter = new SimpleDateFormat("hh:mm");
        String horaString;
        for(int i=0;i<horaInicio.size();i++){
           //De Date a String para FECHA:
            horaString = formatter.format(horaInicio.get(i));
            retorno.add(horaString);
        }
        return retorno;
    }
    
    private String obtenerStringDeUnArrayDeDate(ArrayList<Date> dias,ArrayList<Date> horaInicio){
       String retorno = null;
       Format formatter = new SimpleDateFormat("yyyy-MM-dd");
       Format formatter2 = new SimpleDateFormat("hh:mm");
       String diaString , horaString;
       for(int i=0;i<dias.size();i++){
           //Transformar el dia y horario en String
           //De Date a String para FECHA:
            diaString = formatter.format(dias.get(i));
            //De Date a String para HORA:
            horaString = formatter2.format(horaInicio.get(i));
            retorno = diaString.concat(" ").concat(horaString).concat("\n");
       }
        return retorno;
    }
    
    
    private Date sumarMinutosAHoraInicio (String textoHoraInicio,String textoDuracion){
        //Convierto el String en Date
        Date horaInicio = convertirStringADateFormatoHora(textoHoraInicio);
        //Convierto el String en int
        int duracionMinutos = Integer.parseInt(textoDuracion);
        //Sumo los minutos a la horaInicio
        return sumarHorasFecha(horaInicio, duracionMinutos);   
    }
    
    private Date sumarHorasFecha(Date fecha, int minutos){
	Calendar calendar = Calendar.getInstance();
        calendar.setTime(fecha); // Configuramos la fecha que se recibe
        calendar.add(Calendar.MINUTE, minutos);  // numero de minutos a añadir
        
        return calendar.getTime(); // Devuelve el objeto Date con los nuevos minutos añadidas
    }
       
    private Date convertirStringADateFormatoHora(String hora){
        Date date = null;
        SimpleDateFormat sdf = new SimpleDateFormat("hh:mm");
        try {
            date = sdf.parse(hora);
        } catch (ParseException ex) {
            Logger.getLogger(RegistrarReserva.class.getName()).log(Level.SEVERE, null, ex);
        }
       return date;
    }
    
    private Date convertirStringADateFormatoFecha(String fecha){
        Date date = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            date = sdf.parse(fecha);
        } catch (ParseException ex) {
            Logger.getLogger(RegistrarReserva.class.getName()).log(Level.SEVERE, null, ex);
        }
       return date;
    }
    
    private Date convertirStringADateFormatoFechaDia(String diaSemana) throws ParseException{
        SimpleDateFormat dayFormat = new SimpleDateFormat("E", new Locale("es", "ES"));
        Date date = dayFormat.parse(diaSemana);
       return date;
    }
    
    
    private void atrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atrasActionPerformed
        // TODO add your handling code here:
        
        JFramePrincipal topFrame = (JFramePrincipal) SwingUtilities.getWindowAncestor(this);
        
        ArrayList<JButton> botonesDialogo = new ArrayList<>();
        botonesDialogo = topFrame.mensajeEmergenteConfirmacion("Mensaje de Confirmación", "Al regresar al menú principal, los datos que haya ingresado en algún campo serán descartados.");
        JDialog dialogo = (JDialog) SwingUtilities.getWindowAncestor(botonesDialogo.get(0));
        
        botonesDialogo.get(0).addActionListener((ActionEvent e) -> {
            dialogo.setVisible(false);
            this.remove(dialogo);
            MenuPrincipalBedel panelMenu = new MenuPrincipalBedel();
            panelMenu.setImage("/Imagenes/fondoabs.jpg");
            topFrame.add(panelMenu, BorderLayout.CENTER);
            this.setVisible(false);
            topFrame.remove(this);
            topFrame.setSize(500,550);             
        });
        
        botonesDialogo.get(1).addActionListener((ActionEvent e) -> {
            dialogo.setVisible(false);
            this.remove(dialogo);
        });
    }//GEN-LAST:event_atrasActionPerformed

    private void jButtonAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnadirActionPerformed
        JFramePrincipal topFrame = (JFramePrincipal) SwingUtilities.getWindowAncestor(this);
        Date fechaDato = null;
        Date horaInicioDato = null;
        Date diaYHora = null; 
        int duracionDato = 0;
        int cantAlumnos = 0;
        boolean diasPosteriores = false; 
        GestorValidacion gestorVal = new GestorValidacion();
        GestorReserva gestorReserva = new GestorReserva();
        //Si el campo de la fecha no esta vacio
        if(!this.fecha.getText().isEmpty()){
            /*Obtengo la fecha*/
            String textoFecha = this.fecha.getText();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
            //Validar que la fecha contenga solo numeros y -
            if(gestorVal.validarFormatoFecha(textoFecha)){
                try {
                    fechaDato = sdf.parse(textoFecha);
                } catch (ParseException ex) {
                    topFrame.mensajeEmergente("Formato Incorrecto", "El formato para la fecha es yyyy-MM-dd (Ej: 2017-12-05).");
                }
            }else{
                topFrame.mensajeEmergente("Formato Incorrecto o Datos incorrectos", "Verifique los datos ingresados y tenga en cuenta que el formato para la fecha es yyyy-MM-dd (Ej: 2017-12-05).");
            }
                       
            //Si el campo de horaInicio no está vacio
            if(!this.horaInicio.getText().isEmpty()){
                /*Obtengo la horaInicio*/
                SimpleDateFormat sdfhora = new SimpleDateFormat("hh:mm");
                String textoHora = this.horaInicio.getText();
                //Validar que la fecha contenfa solo numeros y : 
                if(gestorVal.validarFormatoHora(textoHora)){
                    try {
                        horaInicioDato = sdfhora.parse(textoHora);
                        //Obtener dia y hora  
                        //El concat me devuelve otro String 
                        String textoDiaYHora = textoFecha.concat(" ").concat(textoHora); 
                        SimpleDateFormat sdfDiaYHora = new SimpleDateFormat("yyyy-MM-dd HH:mm"); 
                        diaYHora = sdfDiaYHora.parse(textoDiaYHora);
                    } catch (ParseException ex) {
                        Logger.getLogger(RegistrarReserva.class.getName()).log(Level.SEVERE, null, ex);
                    } 
                }else{
                    topFrame.mensajeEmergente("Formato Incorrecto o Datos incorrectos", "Verifique los datos ingresados y tenga en cuenta que el formato para la hora de inicio es hh:mm (Ej: 15:30).");
                }
                
                if(!gestorReserva.validarDiasPosterioresAlActual(diaYHora)){ 
                    topFrame.mensajeEmergente("Fecha inválida", "La fecha ingresada debe ser posterior a la fecha actual."); 
                }else{ 
                    diasPosteriores=true; 
                } 
                    
                //Si el campo de duracion no está en Seleccione
                if (!this.duracion.getSelectedItem().toString().equalsIgnoreCase("Seleccione")){
                    duracionDato = Integer.parseInt(this.duracion.getSelectedItem().toString());
                }else{
                    //Mostrar mensaje de que falta la duracion
                    topFrame.mensajeEmergente("Falta datos", "Debe ingresar una duración para la reserva.");
                }
            }else{
                topFrame.mensajeEmergente("Campo faltante", "Debe ingresar la hora de inicio de la reserva.");
            }
        }else{
            topFrame.mensajeEmergente("Campo faltante", "Debe ingresar la fecha de la reserva.");
        }
            
        //Tipo Aula
        TipoAula aula = TipoAula.SinRecursos;
        switch (this.tipoAula.getSelectedItem().toString()){
            case "Aula informatica": aula = TipoAula.Informatica;break;
            case "Aula multimedio": aula = TipoAula.Multimedios;break;
            case "Aula sin recursos adicionales": aula = TipoAula.SinRecursos;break;
        }
        //Cantidad de alumnos
        //Obtengo un String del jTextField, el replaceAll elimina los espacios (si los tuviera) y parseInt lo convierte en int
        if(!this.cantidadAlumnos.getText().isEmpty()){
            //Tengo que validar si el String contiene solo números
            if(gestorReserva.validarStringSoloConNumeros(this.cantidadAlumnos.getText())){
                //Obtengo un String del jTextField y parseInt lo convierte en int
                cantAlumnos = Integer.parseInt((this.cantidadAlumnos.getText()));
            }else{
                topFrame.mensajeEmergente("Datos Incorrectos", "Debe ingresar solo números en la cantidad de alumnos");
            }
        }else{
            topFrame.mensajeEmergente("Falta datos", "Debe ingresar la cantidad de alumnos");
        }
        ArrayList<String> fechas = new ArrayList<String>(); 
        ArrayList<String> horasInicio = new ArrayList<String>(); 
         
        llenarFechas(fechas); 
        llenarHorasInicio(horasInicio); 
         
        boolean unico = gestorReserva.validarUnicidad(this.fecha.getText(),this.horaInicio.getText(), fechas, horasInicio);
        
        if( unico && diasPosteriores && fechaDato != null && horaInicioDato != null && duracionDato != 0 && cantAlumnos != 0 && this.tabla.getRowCount() < 6){ 
            Object row[] = {this.fecha.getText(),this.horaInicio.getText(),duracion.getSelectedItem().toString(),aula,cantAlumnos}; 
            /*Recupero el modelo de la tabla y agrego las filas a la tabla*/
            ((DefaultTableModel)this.tabla.getModel()).addRow(row);
            this.fecha.setText("");
            this.duracion.setSelectedItem("Seleccione");
            this.horaInicio.setText("");
            this.cantidadAlumnos.setText("");
            this.tipoAula.setSelectedItem("Aula sin recursos adicionales");
        }else{ 
            if(!unico){ 
                topFrame.mensajeEmergente("Fecha o Horario Incorrectos", "Ya se ha ingresado una reserva para la misma fecha y horario."); 
            } 
            if(this.tabla.getRowCount() >= 6){ 
                topFrame.mensajeEmergente("Cantidad máxima", "Se ha alcanzado la máxima cantidad permitida de reservas. " 
                        + "Por favor confirme las reservas para poder proseguir."); 
            } 
        }
        
        
        
    }//GEN-LAST:event_jButtonAnadirActionPerformed

    private void llenarHorasInicio (ArrayList<String> fechas){ 
        for(int i=0; i<tabla.getRowCount() ; i++){ 
            //Por cada fila guardo el horario de inicio 
            fechas.add(this.tabla.getModel().getValueAt(i, 1).toString()); 
        } 
    }
    
    private void llenarFechas (ArrayList<String> fechas){ 
        for(int i=0; i<tabla.getRowCount() ; i++){ 
            //Por cada fila guardo la fecha 
            fechas.add(this.tabla.getModel().getValueAt(i, 0).toString()); 
        } 
    }
    
    
    private void tipoAulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoAulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tipoAulaActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        int row = this.tabla.getSelectedRow(); //fila seleccionada
        if(row >= 0){
            JFramePrincipal topFrame = (JFramePrincipal) SwingUtilities.getWindowAncestor(this);
            DefaultTableModel modelo = (DefaultTableModel)tabla.getModel(); 
            modelo.removeRow(row); 
       }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jCheckBoxLunesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxLunesActionPerformed
        if(this.jCheckBoxLunes.isSelected()){
            this.horaInicioLunes.setEnabled(true);
            this.duracionLunes.setEnabled(true);
        }else{
            this.horaInicioLunes.setText("");
            this.horaInicioLunes.setEnabled(false);
            this.duracionLunes.setSelectedItem("Seleccione");
            this.duracionLunes.setEnabled(false);
            
        }
    }//GEN-LAST:event_jCheckBoxLunesActionPerformed

    private void jCheckBoxMartesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMartesActionPerformed
        if(this.jCheckBoxMartes.isSelected()){
            this.horaInicioMartes.setEnabled(true);
            this.duracionMartes.setEnabled(true);
        }else{
            this.horaInicioMartes.setText("");
            this.horaInicioMartes.setEnabled(false);
            this.duracionMartes.setSelectedItem("Seleccione");
            this.duracionMartes.setEnabled(false);
            
        }
    }//GEN-LAST:event_jCheckBoxMartesActionPerformed

    private void jCheckBoxMiercolesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMiercolesActionPerformed
        if(this.jCheckBoxMiercoles.isSelected()){
            this.horaInicioMiercoles.setEnabled(true);
            this.duracionMiercoles.setEnabled(true);
        }else{
            this.horaInicioMiercoles.setText("");
            this.horaInicioMiercoles.setEnabled(false);
            this.duracionMiercoles.setSelectedItem("Seleccione");
            this.duracionMiercoles.setEnabled(false);
            
        }
    }//GEN-LAST:event_jCheckBoxMiercolesActionPerformed

    private void jCheckBoxJuevesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxJuevesActionPerformed
        if(this.jCheckBoxJueves.isSelected()){
            this.horaInicioJueves.setEnabled(true);
            this.duracionJueves.setEnabled(true);
        }else{
            this.horaInicioJueves.setText("");
            this.horaInicioJueves.setEnabled(false);
            this.duracionJueves.setSelectedItem("Seleccione");
            this.duracionJueves.setEnabled(false);
            
        }
    }//GEN-LAST:event_jCheckBoxJuevesActionPerformed

    private void jCheckBoxViernesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxViernesActionPerformed
        if(this.jCheckBoxViernes.isSelected()){
            this.horaInicioViernes.setEnabled(true);
            this.duracionViernes.setEnabled(true);
        }else{
            this.horaInicioViernes.setText("");
            this.horaInicioViernes.setEnabled(false);
            this.duracionViernes.setSelectedItem("Seleccione");
            this.duracionViernes.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBoxViernesActionPerformed

    private void duracionMartesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duracionMartesActionPerformed
        
    }//GEN-LAST:event_duracionMartesActionPerformed

    private void duracionMiercolesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duracionMiercolesActionPerformed
        
    }//GEN-LAST:event_duracionMiercolesActionPerformed

    private void duracionJuevesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duracionJuevesActionPerformed
        
    }//GEN-LAST:event_duracionJuevesActionPerformed

    private void duracionViernesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duracionViernesActionPerformed
        
    }//GEN-LAST:event_duracionViernesActionPerformed

    private void duracionSabadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duracionSabadoActionPerformed
        
    }//GEN-LAST:event_duracionSabadoActionPerformed

    private void horaInicioLunesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horaInicioLunesActionPerformed
        
    }//GEN-LAST:event_horaInicioLunesActionPerformed

    private void duracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duracionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_duracionActionPerformed
    
    
    
    //codigo de la imagen de fondo ----------------------------------------
    private Image fondo=null;
    
    @Override
    protected void paintComponent(Graphics g){
        super.paintComponent(g);
        g.drawImage(fondo,0,0,getWidth(),getHeight(),null);
    }
    
    public void setImage(String image){
        if (image!=null) {
            fondo=new ImageIcon(getClass().getResource(image)).getImage();
        }
    }
    //-----------------------------------------------------------------------

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aceptar;
    private javax.swing.JTextField apellido;
    private javax.swing.JButton atras;
    private javax.swing.JTextField cantidadAlumnos;
    private javax.swing.JTextField catedra;
    private javax.swing.JComboBox<String> duracion;
    private javax.swing.JComboBox<String> duracionJueves;
    private javax.swing.JComboBox<String> duracionLunes;
    private javax.swing.JComboBox<String> duracionMartes;
    private javax.swing.JComboBox<String> duracionMiercoles;
    private javax.swing.JComboBox<String> duracionSabado;
    private javax.swing.JComboBox<String> duracionViernes;
    private javax.swing.JTextField email;
    private javax.swing.JTextField fecha;
    private javax.swing.JTextField horaInicio;
    private javax.swing.JTextField horaInicioJueves;
    private javax.swing.JTextField horaInicioLunes;
    private javax.swing.JTextField horaInicioMartes;
    private javax.swing.JTextField horaInicioMiercoles;
    private javax.swing.JTextField horaInicioSabado;
    private javax.swing.JTextField horaInicioViernes;
    private javax.swing.JButton jButtonAnadir;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JCheckBox jCheckBoxJueves;
    private javax.swing.JCheckBox jCheckBoxLunes;
    private javax.swing.JCheckBox jCheckBoxMartes;
    private javax.swing.JCheckBox jCheckBoxMiercoles;
    private javax.swing.JCheckBox jCheckBoxSabado;
    private javax.swing.JCheckBox jCheckBoxViernes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelDiaSemana;
    private javax.swing.JLabel jLabelDuracion1;
    private javax.swing.JLabel jLabelDuracion2;
    private javax.swing.JLabel jLabelFecha;
    private javax.swing.JLabel jLabelHoraInicio1;
    private javax.swing.JLabel jLabelHoraInicio2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JComboBox<String> listaCuatrimestre;
    private javax.swing.JComboBox<String> listaModalidad;
    private javax.swing.JComboBox<String> listaPeriodo;
    private javax.swing.JTextField nombre;
    private javax.swing.JPanel panelTabla;
    private javax.swing.JTable tabla;
    private javax.swing.JComboBox<String> tipoAula;
    // End of variables declaration//GEN-END:variables
}
